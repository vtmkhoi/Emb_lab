
bai1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000132  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000132  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000828  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000791  00000000  00000000  000009f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000023d  00000000  00000000  00001181  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000013c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ba  00000000  00000000  000013f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  000017ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0f d0       	rcall	.+30     	; 0xb8 <main>
  9a:	1f c0       	rjmp	.+62     	; 0xda <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <Init_IO>:
#define DDR_BUZZER_O       DDRB
#define BIT_BUZZER_O       7

void Init_IO(void){
	// Set LED_O as output pin
	DDR_LED_O |= (1<<BIT_LED_O);
  9e:	87 b3       	in	r24, 0x17	; 23
  a0:	80 64       	ori	r24, 0x40	; 64
  a2:	87 bb       	out	0x17, r24	; 23

	// Set SWITCH_IP as input pin
	DDR_SWITCH_IP &= ~(1<<BIT_SWITCH_IP);
  a4:	87 b3       	in	r24, 0x17	; 23
  a6:	8f 7d       	andi	r24, 0xDF	; 223
  a8:	87 bb       	out	0x17, r24	; 23

	// Set BUZZ_O as output pin 
	DDR_BUZZER_O |= (1<<BIT_BUZZER_O);
  aa:	87 b3       	in	r24, 0x17	; 23
  ac:	80 68       	ori	r24, 0x80	; 128
  ae:	87 bb       	out	0x17, r24	; 23
	
	// Enable pull-up on SWITCH_IP
	PORT_SWITCH_IP |= (1<<BIT_SWITCH_IP);	
  b0:	88 b3       	in	r24, 0x18	; 24
  b2:	80 62       	ori	r24, 0x20	; 32
  b4:	88 bb       	out	0x18, r24	; 24
  b6:	08 95       	ret

000000b8 <main>:
}
int main(void)
{
	Init_IO();	
  b8:	f2 df       	rcall	.-28     	; 0x9e <Init_IO>
	// Repeat indefinitely
	//for(;;)
	while(1)
	{
		// See if switch is pressed
		if((PIN_SWITCH_IP&(1<<BIT_SWITCH_IP)) == 0)
  ba:	b5 99       	sbic	0x16, 5	; 22
  bc:	07 c0       	rjmp	.+14     	; 0xcc <main+0x14>
		{
			// Enable LED & BUZZER
			PORT_LED_O |= (1<<BIT_LED_O);
  be:	88 b3       	in	r24, 0x18	; 24
  c0:	80 64       	ori	r24, 0x40	; 64
  c2:	88 bb       	out	0x18, r24	; 24
			PORT_BUZZER_O &= ~(1<<BIT_BUZZER_O);
  c4:	88 b3       	in	r24, 0x18	; 24
  c6:	8f 77       	andi	r24, 0x7F	; 127
  c8:	88 bb       	out	0x18, r24	; 24
  ca:	f7 cf       	rjmp	.-18     	; 0xba <main+0x2>
//			_delay_ms(500);
		}
		else
		{
			// Disable LED & BUZZER
			PORT_LED_O &= ~(1<<BIT_LED_O);
  cc:	88 b3       	in	r24, 0x18	; 24
  ce:	8f 7b       	andi	r24, 0xBF	; 191
  d0:	88 bb       	out	0x18, r24	; 24
			PORT_BUZZER_O |= (1<<BIT_BUZZER_O);
  d2:	88 b3       	in	r24, 0x18	; 24
  d4:	80 68       	ori	r24, 0x80	; 128
  d6:	88 bb       	out	0x18, r24	; 24
  d8:	f0 cf       	rjmp	.-32     	; 0xba <main+0x2>

000000da <_exit>:
  da:	f8 94       	cli

000000dc <__stop_program>:
  dc:	ff cf       	rjmp	.-2      	; 0xdc <__stop_program>
